{"version":3,"file":"js/admin.js","mappings":"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","sources":["webpack://wecodeart/./inc/support/modules/cookies/src/js/Components/Modal.js","webpack://wecodeart/./inc/support/modules/cookies/src/js/Components/Toggler.js","webpack://wecodeart/external window \"React\"","webpack://wecodeart/webpack/bootstrap","webpack://wecodeart/webpack/runtime/compat get default export","webpack://wecodeart/webpack/runtime/define property getters","webpack://wecodeart/webpack/runtime/hasOwnProperty shorthand","webpack://wecodeart/webpack/runtime/make namespace object","webpack://wecodeart/./inc/support/modules/cookies/src/js/admin.js"],"sourcesContent":["const {\r\n    i18n: {\r\n        __,\r\n    },\r\n    components: {\r\n        Modal,\r\n        Spinner,\r\n        Button,\r\n        TextareaControl,\r\n        ToggleControl,\r\n    },\r\n    element: {\r\n        useRef,\r\n        useState,\r\n    },\r\n} = wp;\r\n\r\nconst ProgressComponent = ({ progress = 0 }) => {\r\n    return (\r\n        <>\r\n            <div style={{ border: '1px solid lightgrey', borderRadius: 5, overflow: 'hidden' }}>\r\n                <div style={{\r\n                    backgroundColor: 'var(--wp-admin-theme-color)',\r\n                    height: 14,\r\n                    width: `${progress}%`\r\n                }} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ScanCookies = ({ formData, setFormData, closeModal, createNotice }) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [scanning, setScanning] = useState(null);\r\n    const [scanType, setScanType] = useState(null);\r\n    const formRef = useRef(null);\r\n\r\n    const handleScan = async (page) => {\r\n        const formData = new FormData(formRef.current);\r\n        formData.append('scan', scanType ? 'all' : 'last');\r\n        formData.append('page', page);\r\n\r\n        const response = await fetch(`${wecodeart.restUrl}/scan_cookies`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        const { cookies = [], progress, next } = await response.json();\r\n\r\n        if (next) {\r\n            setProgress(progress);\r\n            await handleScan(next);\r\n        } else {\r\n            setScanning(false);\r\n            setProgress(100);\r\n            const cookiesAmount = Object.values(cookies).flat().length;\r\n            createNotice('success', sprintf(__('%s detected cookie(s) added to list.', 'wecodeart'), cookiesAmount));\r\n        }\r\n    };\r\n\r\n    const startScan = async () => {\r\n        setScanning(true);\r\n        setProgress(0);\r\n        await handleScan(1);\r\n    };\r\n\r\n    return (\r\n        <Modal title={__('Scan cookies', 'wecodeart')} onRequestClose={closeModal}>\r\n            <form name=\"wecodeart-cookies-scan\" ref={formRef}>\r\n                <div className=\"components-notice is-warning flex-column align-items-start m-0 mb-3\">\r\n                    <ul class=\"my-0\">\r\n                        <li class=\"mb-0\">{__('Scan your website for server-side cookies (set with setcookie).', 'wecodeart')}</li>\r\n                        <li class=\"mb-0\">{__('Note that all cookies will be automatically detected on page load.', 'wecodeart')}</li>\r\n                        {scanType && <li class=\"mb-0\">{__('Scanning all URLs will take significantly longer.', 'wecodeart')}</li>}\r\n                    </ul>\r\n                </div>\r\n                <ToggleControl\r\n                    label={__('Full scan?', 'wecodeart')}\r\n                    name=\"scan\"\r\n                    checked={scanType}\r\n                    onChange={() => setScanType(!scanType)}\r\n                    help={sprintf(\r\n                        __('Scan %s for each post type.', 'wecodeart'),\r\n                        scanType ? __('all urls', 'wecodeart') : __('last url', 'wecodeart')\r\n                    )}\r\n                />\r\n                <TextareaControl\r\n                    label={__('Additional URLs to scan', 'wecodeart')}\r\n                    name=\"urls\"\r\n                    cols=\"50\"\r\n                    value={formData.scan}\r\n                    onChange={scan => setFormData({ ...formData, scan })}\r\n                    help={__('One per line - save settings for future scans.', 'wecodeart')}\r\n                />\r\n                <Button className=\"button d-flex gap-2\" isPrimary icon={scanning && <Spinner style={{ margin: 0 }} />} onClick={startScan} {...{ disabled: scanning }}>\r\n                    {scanning ? __('Scaning cookies', 'wecodeart') : __('Scan cookies', 'wecodeart')}\r\n                </Button>\r\n                {scanning && (<p><ProgressComponent progress={progress} /></p>)}\r\n            </form>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ScanCookies;","const {\r\n    i18n: {\r\n        __,\r\n    },\r\n    components: {\r\n        Button,\r\n        Tooltip,\r\n        Icon,\r\n    },\r\n} = wp;\r\n\r\nconst Toggler = ({ formData }) => {\r\n    const {\r\n        icon: {\r\n            viewBox = '0 0 512 512',\r\n            paths = ['M257.5 27.6c-.8-5.4-4.9-9.8-10.3-10.6v0c-22.1-3.1-44.6 .9-64.4 11.4l-74 39.5C89.1 78.4 73.2 94.9 63.4 115L26.7 190.6c-9.8 20.1-13 42.9-9.1 64.9l14.5 82.8c3.9 22.1 14.6 42.3 30.7 57.9l60.3 58.4c16.1 15.6 36.6 25.6 58.7 28.7l83 11.7c22.1 3.1 44.6-.9 64.4-11.4l74-39.5c19.7-10.5 35.6-27 45.4-47.2l36.7-75.5c9.8-20.1 13-42.9 9.1-64.9v0c-.9-5.3-5.3-9.3-10.6-10.1c-51.5-8.2-92.8-47.1-104.5-97.4c-1.8-7.6-8-13.4-15.7-14.6c-54.6-8.7-97.7-52-106.2-106.8zM208 144a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM144 336a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm224-64a32 32 0 1 1 0 64 32 32 0 1 1 0-64z'],\r\n        } = {},\r\n    } = formData;\r\n\r\n    const generateStyles = ({\r\n        position,\r\n        style: {\r\n            padding,\r\n            border = {},\r\n            borderRadius,\r\n            width,\r\n            height,\r\n            left = 'initial',\r\n            right = 'initial',\r\n            bottom = 0,\r\n            backgroundColor = 'transparent',\r\n            color = 'inherit',\r\n        } = {}\r\n    } = {}) => {\r\n        let style = {\r\n            position: 'fixed',\r\n            bottom,\r\n            width,\r\n            height,\r\n            padding,\r\n            color,\r\n            borderRadius,\r\n            backgroundColor,\r\n            left: position === 'left' ? left : 'initial',\r\n            right: position === 'right' ? left : 'initial',\r\n            transition: 'all .3s ease-in-out',\r\n            zIndex: 1000,\r\n        }\r\n\r\n        let borderStyles = {};\r\n        const borderKeys = Object.keys(border);\r\n        const sides = ['top', 'left', 'right', 'bottom'];\r\n        const hasBorderMultiple = sides.some(side => borderKeys.includes(side));\r\n\r\n        if (hasBorderMultiple) {\r\n            for (const dir in border) {\r\n                const dirStyles = border[dir];\r\n                borderStyles = { ...borderStyles, [`border${capitalizeWord(dir)}`]: Object.values(dirStyles).join(' ') }\r\n            }\r\n        } else {\r\n            borderStyles = { border: Object.values(border).join(' ') };\r\n        }\r\n\r\n        style = { ...style, ...borderStyles };\r\n\r\n        return style;\r\n    };\r\n\r\n    return (\r\n        <Tooltip text={__('Preview', 'wecodeart')}>\r\n            <Button style={generateStyles(formData)}>\r\n                <Icon icon={() => {\r\n                    return (\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewBox}>\r\n                            {paths.map(el => {\r\n                                return (\r\n                                    <path fill=\"currentColor\" d={el} />\r\n                                );\r\n                            })}\r\n                        </svg>\r\n                    )\r\n                }} />\r\n            </Button>\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default Toggler;","module.exports = window[\"React\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * @package: \tWeCodeArt Cookies Extension\r\n * @author: \tBican Marian Valeriu\r\n * @license:\thttps://www.wecodeart.com/\r\n * @version:\t1.0.0\r\n */\r\n\r\nimport Toggler from './Components/Toggler';\r\nimport ScanCookies from './Components/Modal';\r\n\r\nconst {\r\n    i18n: {\r\n        __,\r\n        _x,\r\n    },\r\n    hooks: {\r\n        addFilter\r\n    },\r\n    components: {\r\n        Placeholder,\r\n        Card,\r\n        CardHeader,\r\n        CardBody,\r\n        Spinner,\r\n        Button,\r\n        Notice,\r\n        TextControl,\r\n        BaseControl,\r\n        RangeControl,\r\n        DropdownMenu,\r\n        SelectControl,\r\n        ToggleControl,\r\n        ColorPalette,\r\n        ColorIndicator,\r\n        __experimentalHStack: HStack,\r\n        __experimentalNumberControl: NumberControl,\r\n        __experimentalBorderBoxControl: BorderBoxControl,\r\n    },\r\n    element: {\r\n        useState,\r\n    },\r\n    blockEditor: {\r\n        useSetting,\r\n    },\r\n} = wp;\r\n\r\nconst getEditorUrl = (object = {}) => {\r\n    const url = new URL(`${wecodeart.adminUrl}/site-editor.php`);\r\n    Object.keys(object).map(key => url.searchParams.append(key, object[key]));\r\n\r\n    return url.toString();\r\n}\r\n\r\naddFilter('wecodeart.admin.tabs.plugins', 'wecodeart/cookies/admin/panel', optionsPanel);\r\nfunction optionsPanel(panels) {\r\n    return [...panels, {\r\n        name: 'wca-cookies',\r\n        title: __('Cookies', 'wecodeart'),\r\n        render: (props) => <Options {...props} />\r\n    }];\r\n}\r\n\r\nconst Options = (props) => {\r\n    const { settings, saveSettings, isRequesting, createNotice } = props;\r\n\r\n    if (isRequesting || !settings) {\r\n        return <Placeholder {...{\r\n            icon: <Spinner />,\r\n            label: __('Loading', 'wecodeart'),\r\n            instructions: __('Please wait, loading settings...', 'wecodeart')\r\n        }} />;\r\n    }\r\n\r\n    const apiOptions = (({ cookies }) => (cookies))(settings);\r\n    const [loading, setLoading] = useState(null);\r\n    const [formData, setFormData] = useState(apiOptions);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const setStyle = (extra = {}, container = 'offcanvas') => {\r\n        const newStyle = { ...formData?.[container]?.style, ...extra };\r\n\r\n        setFormData({\r\n            ...formData, ...{\r\n                [container]: {\r\n                    ...formData?.[container],\r\n                    style: newStyle\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleNotice = () => {\r\n        setLoading(false);\r\n\r\n        return createNotice('success', __('Settings saved.', 'wecodeart'));\r\n    };\r\n\r\n    const colors = useSetting('color.palette');\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {formData.notice !== false && (\r\n                <Notice status=\"info\" className=\"border-top border-bottom border-end mb-3\" onRemove={() => setFormData({ ...formData, notice: false })}>\r\n                    <p className=\"my-0\" dangerouslySetInnerHTML={{\r\n                        __html: sprintf(\r\n                            _x('You can edit module messages/templates under %s.', 'wecodeart'),\r\n                            `<a href=\"${getEditorUrl({\r\n                                path: '/patterns',\r\n                                categoryType: 'wp_template_part',\r\n                                categoryId: 'wca-cookies',\r\n                            })}\" target=\"_blank\">${__('Site Editor', 'wecodeart')}</a>`\r\n                        )\r\n                    }} />\r\n                </Notice>\r\n            )}\r\n            <div className=\"grid\" style={{ '--wca--columns': 2 }}>\r\n                <div className=\"g-col-2\">\r\n                    <Card className=\"border shadow-none h-100\">\r\n                        <CardHeader>\r\n                            <h5 className=\"text-uppercase fw-medium m-0\">{__('Cookies', 'wecodeart')}</h5>\r\n                            <Button className=\"button\" onClick={() => setIsOpen(true)}>{__('Detect cookies', 'wecodeart')}</Button>\r\n                        </CardHeader>\r\n                        <CardBody style={{ color: 'rgb(30, 30, 30)' }}>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Block cookies', 'wecodeart')}\r\n                                    checked={formData?.cookies?.block}\r\n                                    onChange={block => setFormData({\r\n                                        ...formData, cookies: {\r\n                                            ...formData?.cookies,\r\n                                            block\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Cookies are %s until accepted.', 'wecodeart'),\r\n                                        formData?.cookies?.block ? __('blocked', 'wecodeart') : __('not blocked', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <NumberControl\r\n                                    label={__('Expiration', 'wecodeart')}\r\n                                    value={formData?.cookies?.expire}\r\n                                    onChange={expire => setFormData({\r\n                                        ...formData, cookies: {\r\n                                            ...formData?.cookies,\r\n                                            expire\r\n                                        }\r\n                                    })}\r\n                                    help={__('Duration for cookie accept|reject - in days.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <TextControl\r\n                                    label={__('Necessary cookies', 'wecodeart')}\r\n                                    value={formData?.cookies?.necessary}\r\n                                    onChange={necessary => setFormData({\r\n                                        ...formData, cookies: {\r\n                                            ...formData?.cookies,\r\n                                            necessary\r\n                                        }\r\n                                    })}\r\n                                    help={__('These cookies are stictly necessary and website cannot function properly without them.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <TextControl\r\n                                    label={__('Necessary cookies prefix', 'wecodeart')}\r\n                                    value={formData?.cookies?.necessaryPrefix}\r\n                                    onChange={necessaryPrefix => setFormData({\r\n                                        ...formData, cookies: {\r\n                                            ...formData?.cookies,\r\n                                            necessaryPrefix\r\n                                        }\r\n                                    })}\r\n                                    help={__('Cookies starting with these prefixes will also be considered necessary.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"g-col-1\">\r\n                    <Card className=\"border shadow-none h-100\">\r\n                        <CardHeader>\r\n                            <h5 className=\"text-uppercase fw-medium m-0\">{__('Offcanvas', 'wecodeart')}</h5>\r\n                        </CardHeader>\r\n                        <CardBody style={{ color: 'rgb(30, 30, 30)' }}>\r\n                            <p>\r\n                                <SelectControl\r\n                                    label={__('Position', 'wecodeart')}\r\n                                    value={formData?.offcanvas?.position}\r\n                                    options={[\r\n                                        { label: __('Top', 'wecodeart'), value: 'top' },\r\n                                        { label: __('Bottom', 'wecodeart'), value: 'bottom' },\r\n                                    ]}\r\n                                    onChange={position => setFormData({\r\n                                        ...formData, ...{\r\n                                            offcanvas: {\r\n                                                ...formData?.offcanvas,\r\n                                                position\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={__('Relative to the browser window.', 'wecodeart')}\r\n                                    __nextHasNoMarginBottom\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <TextControl\r\n                                    label={__('Title', 'wecodeart')}\r\n                                    value={formData?.offcanvas?.title}\r\n                                    onChange={title => setFormData({\r\n                                        ...formData, ...{\r\n                                            offcanvas: {\r\n                                                ...formData?.offcanvas,\r\n                                                title\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={__('The title for the offcanvas.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <SelectControl\r\n                                    label={__('Backdrop', 'wecodeart')}\r\n                                    value={formData?.offcanvas?.backdrop}\r\n                                    options={[\r\n                                        { label: __('Enabled', 'wecodeart'), value: 'true' },\r\n                                        { label: __('Static', 'wecodeart'), value: 'static' },\r\n                                        { label: __('Disabled', 'wecodeart'), value: 'false' },\r\n                                    ]}\r\n                                    onChange={backdrop => setFormData({\r\n                                        ...formData, ...{\r\n                                            offcanvas: {\r\n                                                ...formData?.offcanvas,\r\n                                                backdrop\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={formData?.offcanvas?.backdrop !== 'false' && sprintf(\r\n                                        __('Clicking backdrop will %s offcanvas.', 'wecodeart'),\r\n                                        formData?.offcanvas?.backdrop === 'static' ? __('not close', 'wecodeart') : __('close', 'wecodeart')\r\n                                    )}\r\n                                    __nextHasNoMarginBottom\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Allow scroll', 'wecodeart')}\r\n                                    checked={formData?.offcanvas?.scroll}\r\n                                    onChange={scroll => setFormData({\r\n                                        ...formData, ...{\r\n                                            offcanvas: {\r\n                                                ...formData?.offcanvas,\r\n                                                scroll\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Scroll is %s when offcanvas is active.', 'wecodeart'),\r\n                                        formData?.offcanvas?.scroll ? __('allowed', 'wecodeart') : __('not allowed', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Show close button', 'wecodeart')}\r\n                                    checked={formData?.offcanvas?.close}\r\n                                    onChange={close => setFormData({\r\n                                        ...formData, ...{\r\n                                            offcanvas: {\r\n                                                ...formData?.offcanvas,\r\n                                                close\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Offcanvas close button is %s.', 'wecodeart'),\r\n                                        formData?.offcanvas?.close ? __('shown', 'wecodeart') : __('not shown', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Keyboard control', 'wecodeart')}\r\n                                    checked={formData?.offcanvas?.keyboard}\r\n                                    onChange={keyboard => setFormData({\r\n                                        ...formData, ...{\r\n                                            offcanvas: {\r\n                                                ...formData?.offcanvas,\r\n                                                keyboard\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Offcanvas %s be closed with ESC key.', 'wecodeart'),\r\n                                        formData?.offcanvas?.keyboard ? __('can', 'wecodeart') : __('cannot', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <BaseControl label={__('Colors', 'wecodeart')}>\r\n                                    <HStack style={{ justifyContent: 'flex-start' }}>\r\n                                        <DropdownMenu\r\n                                            label={__('Background Color', 'wecodeart')}\r\n                                            icon={<ColorIndicator colorValue={formData?.offcanvas?.style?.backgroundColor} />}\r\n                                            toggleProps={{\r\n                                                style: {\r\n                                                    height: 'initial',\r\n                                                    minWidth: 'initial',\r\n                                                    padding: 0\r\n                                                }\r\n                                            }}\r\n                                            popoverProps={{\r\n                                                focusOnMount: 'container',\r\n                                                position: 'bottom',\r\n                                                noArrow: false,\r\n                                            }}\r\n                                        >\r\n                                            {() => (\r\n                                                <ColorPalette\r\n                                                    colors={colors}\r\n                                                    enableAlpha\r\n                                                    value={formData?.offcanvas?.style?.backgroundColor}\r\n                                                    onChange={backgroundColor => setStyle({ backgroundColor })}\r\n                                                />\r\n                                            )}\r\n                                        </DropdownMenu>\r\n                                        <DropdownMenu\r\n                                            label={__('Text Color', 'wecodeart')}\r\n                                            icon={<ColorIndicator colorValue={formData?.offcanvas?.style?.color} />}\r\n                                            toggleProps={{\r\n                                                style: {\r\n                                                    height: 'initial',\r\n                                                    minWidth: 'initial',\r\n                                                    padding: 0\r\n                                                }\r\n                                            }}\r\n                                            popoverProps={{\r\n                                                focusOnMount: 'container',\r\n                                                position: 'bottom',\r\n                                                noArrow: false,\r\n                                            }}\r\n                                        >\r\n                                            {() => (\r\n                                                <ColorPalette\r\n                                                    colors={colors}\r\n                                                    enableAlpha\r\n                                                    value={formData?.offcanvas?.style?.color}\r\n                                                    onChange={color => setStyle({ color })}\r\n                                                />\r\n                                            )}\r\n                                        </DropdownMenu>\r\n                                    </HStack>\r\n                                </BaseControl>\r\n                            </p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"g-col-1\">\r\n                    <Card className=\"border shadow-none h-100\">\r\n                        <CardHeader>\r\n                            <h5 className=\"text-uppercase fw-medium m-0\">{__('Modal', 'wecodeart')}</h5>\r\n                        </CardHeader>\r\n                        <CardBody style={{ color: 'rgb(30, 30, 30)' }}>\r\n                            <p>\r\n                                <SelectControl\r\n                                    label={__('Position', 'wecodeart')}\r\n                                    value={formData?.modal?.position}\r\n                                    options={[\r\n                                        { label: __('Top', 'wecodeart'), value: 'top' },\r\n                                        { label: __('Centered', 'wecodeart'), value: 'centered' },\r\n                                        { label: __('Custom', 'wecodeart'), value: 'custom' },\r\n                                    ]}\r\n                                    onChange={position => setFormData({\r\n                                        ...formData, ...{\r\n                                            modal: {\r\n                                                ...formData?.modal,\r\n                                                position\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={__('Relative to the browser window.', 'wecodeart')}\r\n                                    __nextHasNoMarginBottom\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <TextControl\r\n                                    label={__('Title', 'wecodeart')}\r\n                                    value={formData?.modal?.title}\r\n                                    onChange={title => setFormData({\r\n                                        ...formData, ...{\r\n                                            modal: {\r\n                                                ...formData?.modal,\r\n                                                title\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={__('The title for the modal.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <SelectControl\r\n                                    label={__('Backdrop', 'wecodeart')}\r\n                                    value={formData?.modal?.backdrop}\r\n                                    options={[\r\n                                        { label: __('Enabled', 'wecodeart'), value: 'true' },\r\n                                        { label: __('Static', 'wecodeart'), value: 'static' },\r\n                                        { label: __('Disabled', 'wecodeart'), value: 'false' },\r\n                                    ]}\r\n                                    onChange={backdrop => setFormData({\r\n                                        ...formData, ...{\r\n                                            modal: {\r\n                                                ...formData?.modal,\r\n                                                backdrop\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={formData?.modal?.backdrop !== 'false' && sprintf(\r\n                                        __('Clicking backdrop will %s modal.', 'wecodeart'),\r\n                                        formData?.modal?.backdrop === 'static' ? __('not close', 'wecodeart') : __('close', 'wecodeart')\r\n                                    )}\r\n                                    __nextHasNoMarginBottom\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Close offcanvas', 'wecodeart')}\r\n                                    checked={formData?.modal?.closeOffcanvas}\r\n                                    onChange={closeOffcanvas => setFormData({\r\n                                        ...formData, ...{\r\n                                            modal: {\r\n                                                ...formData?.modal,\r\n                                                closeOffcanvas\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Offcanvas will %s when modal is active.', 'wecodeart'),\r\n                                        formData?.modal?.closeOffcanvas ? __('close', 'wecodeart') : __('not close', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Show close button', 'wecodeart')}\r\n                                    checked={formData?.modal?.close}\r\n                                    onChange={close => setFormData({\r\n                                        ...formData, ...{\r\n                                            modal: {\r\n                                                ...formData?.modal,\r\n                                                close\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Modal close button is %s.', 'wecodeart'),\r\n                                        formData?.modal?.close ? __('shown', 'wecodeart') : __('not shown', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Keyboard control', 'wecodeart')}\r\n                                    checked={formData?.modal?.keyboard}\r\n                                    onChange={keyboard => setFormData({\r\n                                        ...formData, ...{\r\n                                            modal: {\r\n                                                ...formData?.modal,\r\n                                                keyboard\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Modal %s be closed with ESC key.', 'wecodeart'),\r\n                                        formData?.modal?.keyboard ? __('can', 'wecodeart') : __('cannot', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <BaseControl label={__('Colors', 'wecodeart')}>\r\n                                    <HStack style={{ justifyContent: 'flex-start' }}>\r\n                                        <DropdownMenu\r\n                                            label={__('Background Color', 'wecodeart')}\r\n                                            icon={<ColorIndicator colorValue={formData?.modal?.style?.backgroundColor} />}\r\n                                            toggleProps={{\r\n                                                style: {\r\n                                                    height: 'initial',\r\n                                                    minWidth: 'initial',\r\n                                                    padding: 0\r\n                                                }\r\n                                            }}\r\n                                            popoverProps={{\r\n                                                focusOnMount: 'container',\r\n                                                position: 'bottom',\r\n                                                noArrow: false,\r\n                                            }}\r\n                                        >\r\n                                            {() => (\r\n                                                <ColorPalette\r\n                                                    colors={colors}\r\n                                                    enableAlpha\r\n                                                    value={formData?.modal?.style?.backgroundColor}\r\n                                                    onChange={backgroundColor => setStyle({ backgroundColor }, 'modal')}\r\n                                                />\r\n                                            )}\r\n                                        </DropdownMenu>\r\n                                        <DropdownMenu\r\n                                            label={__('Text Color', 'wecodeart')}\r\n                                            icon={<ColorIndicator colorValue={formData?.modal?.style?.color} />}\r\n                                            toggleProps={{\r\n                                                style: {\r\n                                                    height: 'initial',\r\n                                                    minWidth: 'initial',\r\n                                                    padding: 0\r\n                                                }\r\n                                            }}\r\n                                            popoverProps={{\r\n                                                focusOnMount: 'container',\r\n                                                position: 'bottom',\r\n                                                noArrow: false,\r\n                                            }}\r\n                                        >\r\n                                            {() => (\r\n                                                <ColorPalette\r\n                                                    colors={colors}\r\n                                                    enableAlpha\r\n                                                    value={formData?.modal?.style?.color}\r\n                                                    onChange={color => setStyle({ color }, 'modal')}\r\n                                                />\r\n                                            )}\r\n                                        </DropdownMenu>\r\n                                    </HStack>\r\n                                </BaseControl>\r\n                            </p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"g-col-1\">\r\n                    <Card className=\"border shadow-none h-100\">\r\n                        <CardHeader>\r\n                            <h5 className=\"text-uppercase fw-medium m-0\">{__('Toggler', 'wecodeart')}</h5>\r\n                        </CardHeader>\r\n                        <CardBody style={{ color: 'rgb(30, 30, 30)' }}>\r\n                            <p>\r\n                                <SelectControl\r\n                                    label={__('Position', 'wecodeart')}\r\n                                    value={formData?.toggler?.position}\r\n                                    options={[\r\n                                        { label: __('Left', 'wecodeart'), value: 'left' },\r\n                                        { label: __('Right', 'wecodeart'), value: 'right' },\r\n                                    ]}\r\n                                    onChange={position => setFormData({\r\n                                        ...formData, ...{\r\n                                            toggler: {\r\n                                                ...formData?.toggler,\r\n                                                position\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                                    help={__('Relative to the browser window.', 'wecodeart')}\r\n                                    __nextHasNoMarginBottom\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <HStack>\r\n                                    <NumberControl\r\n                                        isShiftStepEnabled={true}\r\n                                        spinControls=\"custom\"\r\n                                        label={__('Horizontal Margin', 'wecodeart')}\r\n                                        help={__('Number of pixels for horizontal window distance.', 'wecodeart')}\r\n                                        min={0}\r\n                                        value={formData?.toggler?.style?.left}\r\n                                        onChange={value => setStyle({ left: parseInt(value) }, 'toggler')}\r\n                                    />\r\n                                    <NumberControl\r\n                                        isShiftStepEnabled={true}\r\n                                        spinControls=\"custom\"\r\n                                        label={__('Vertical Margin', 'wecodeart')}\r\n                                        help={__('Number of pixels for vertical window distance.', 'wecodeart')}\r\n                                        min={0}\r\n                                        value={formData?.toggler?.style?.bottom}\r\n                                        onChange={bottom => setStyle({ bottom: parseInt(bottom) }, 'toggler')}\r\n                                    />\r\n                                </HStack>\r\n                            </p>\r\n                            <p>\r\n                                <NumberControl\r\n                                    isShiftStepEnabled={true}\r\n                                    spinControls=\"custom\"\r\n                                    label={__('Size', 'wecodeart')}\r\n                                    min={20}\r\n                                    value={formData?.toggler?.style?.width}\r\n                                    onChange={size => setStyle({ width: parseInt(size), height: parseInt(size) }, 'toggler')}\r\n                                    help={__('In pixels.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <NumberControl\r\n                                    isShiftStepEnabled={true}\r\n                                    spinControls=\"custom\"\r\n                                    label={__('Padding', 'wecodeart')}\r\n                                    min={0}\r\n                                    value={formData?.toggler?.style?.padding}\r\n                                    onChange={padding => setStyle({ padding: parseInt(padding) }, 'toggler')}\r\n                                    help={__('In pixels.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <BorderBoxControl\r\n                                    colors={colors}\r\n                                    label={__('Border', 'wecodeart')}\r\n                                    value={formData?.toggler?.style?.border}\r\n                                    onChange={border => setStyle({ border }, 'toggler')}\r\n                                    help={__('In pixels.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <RangeControl\r\n                                    label={__('Radius', 'wecodeart')}\r\n                                    allowReset={true}\r\n                                    value={formData?.toggler?.style?.borderRadius}\r\n                                    onChange={borderRadius => setStyle({ borderRadius }, 'toggler')}\r\n                                    min={0}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <BaseControl label={__('Colors', 'wecodeart')}>\r\n                                    <HStack style={{ justifyContent: 'flex-start' }}>\r\n                                        <DropdownMenu\r\n                                            label={__('Background Color', 'wecodeart')}\r\n                                            icon={<ColorIndicator colorValue={formData?.toggler?.style?.backgroundColor} />}\r\n                                            toggleProps={{\r\n                                                style: {\r\n                                                    height: 'initial',\r\n                                                    minWidth: 'initial',\r\n                                                    padding: 0\r\n                                                }\r\n                                            }}\r\n                                            popoverProps={{\r\n                                                focusOnMount: 'container',\r\n                                                position: 'bottom',\r\n                                                noArrow: false,\r\n                                            }}\r\n                                        >\r\n                                            {() => (\r\n                                                <ColorPalette\r\n                                                    colors={colors}\r\n                                                    enableAlpha\r\n                                                    value={formData?.toggler?.style?.backgroundColor}\r\n                                                    onChange={backgroundColor => setStyle({ backgroundColor }, 'toggler')}\r\n                                                />\r\n                                            )}\r\n                                        </DropdownMenu>\r\n                                        <DropdownMenu\r\n                                            label={__('Icon Color', 'wecodeart')}\r\n                                            icon={<ColorIndicator colorValue={formData?.toggler?.style?.color} />}\r\n                                            toggleProps={{\r\n                                                style: {\r\n                                                    height: 'initial',\r\n                                                    minWidth: 'initial',\r\n                                                    padding: 0\r\n                                                }\r\n                                            }}\r\n                                            popoverProps={{\r\n                                                focusOnMount: 'container',\r\n                                                position: 'bottom',\r\n                                                noArrow: false,\r\n                                            }}\r\n                                        >\r\n                                            {() => (\r\n                                                <ColorPalette\r\n                                                    colors={colors}\r\n                                                    enableAlpha\r\n                                                    value={formData?.toggler?.style?.color}\r\n                                                    onChange={color => setStyle({ color }, 'toggler')}\r\n                                                />\r\n                                            )}\r\n                                        </DropdownMenu>\r\n                                    </HStack>\r\n                                </BaseControl>\r\n                            </p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"g-col-1\">\r\n                    <Card className=\"border shadow-none h-100\">\r\n                        <CardHeader>\r\n                            <h5 className=\"text-uppercase fw-medium m-0\">{__('Notifications', 'wecodeart')}</h5>\r\n                        </CardHeader>\r\n                        <CardBody style={{ color: 'rgb(30, 30, 30)' }}>\r\n                            <p>\r\n                                <ToggleControl\r\n                                    label={__('Toast confirmation', 'wecodeart')}\r\n                                    checked={formData?.toast?.enable}\r\n                                    onChange={enable => setFormData({\r\n                                        ...formData, toast: {\r\n                                            ...formData?.toast,\r\n                                            enable\r\n                                        }\r\n                                    })}\r\n                                    help={sprintf(\r\n                                        __('Toast confirmation messages are %s.', 'wecodeart'),\r\n                                        formData?.toast.enable ? __('enabled', 'wecodeart') : __('disabled', 'wecodeart')\r\n                                    )}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <NumberControl\r\n                                    label={__('Delay time', 'wecodeart')}\r\n                                    value={formData?.toast?.delay}\r\n                                    disabled={!formData?.toast?.enable}\r\n                                    onChange={delay => setFormData({\r\n                                        ...formData, toast: {\r\n                                            ...formData?.toast,\r\n                                            delay\r\n                                        }\r\n                                    })}\r\n                                    help={__('Duration of the toast message - in miliseconds.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <TextControl\r\n                                    label={__('Confirm message', 'wecodeart')}\r\n                                    value={formData?.toast?.confirm}\r\n                                    disabled={!formData?.toast?.enable}\r\n                                    onChange={confirm => setFormData({\r\n                                        ...formData, toast: {\r\n                                            ...formData?.toast,\r\n                                            confirm\r\n                                        }\r\n                                    })}\r\n                                    help={__('This message is displayed after user accepts cookies.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <TextControl\r\n                                    label={__('Reject message', 'wecodeart')}\r\n                                    value={formData?.toast?.reject}\r\n                                    disabled={!formData?.toast?.enable}\r\n                                    onChange={reject => setFormData({\r\n                                        ...formData, toast: {\r\n                                            ...formData?.toast,\r\n                                            reject\r\n                                        }\r\n                                    })}\r\n                                    help={__('This message is displayed after user rejects cookies.', 'wecodeart')}\r\n                                />\r\n                            </p>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n            <Toggler {...{ formData: formData?.toggler }} />\r\n            {isOpen && <ScanCookies formData={formData} setFormData={setFormData} createNotice={createNotice} closeModal={() => setIsOpen(false)} />}\r\n            <hr style={{ margin: '20px 0' }} />\r\n            <Button\r\n                className=\"button\"\r\n                isPrimary\r\n                isLarge\r\n                icon={loading && <Spinner />}\r\n                onClick={() => {\r\n                    setLoading(true);\r\n                    saveSettings({ cookies: formData }, handleNotice);\r\n                }}\r\n                {...{ disabled: loading }}\r\n            >\r\n                {loading ? '' : __('Save', 'wecodeart')}\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Options;"],"names":["i18n","__","components","Modal","Spinner","Button","TextareaControl","ToggleControl","element","useRef","useState","wp","ProgressComponent","progress","createElement","Fragment","style","border","borderRadius","overflow","backgroundColor","height","width","ScanCookies","formData","setFormData","closeModal","createNotice","setProgress","scanning","setScanning","scanType","setScanType","formRef","handleScan","page","FormData","current","append","response","fetch","wecodeart","restUrl","method","body","cookies","next","json","cookiesAmount","Object","values","flat","length","sprintf","startScan","title","onRequestClose","name","ref","className","class","label","checked","onChange","help","cols","value","scan","isPrimary","icon","margin","onClick","disabled","Tooltip","Icon","Toggler","viewBox","paths","generateStyles","position","padding","left","right","bottom","color","transition","zIndex","borderStyles","borderKeys","keys","sides","hasBorderMultiple","some","side","includes","dir","dirStyles","capitalizeWord","join","text","xmlns","map","el","fill","d","_x","hooks","addFilter","Placeholder","Card","CardHeader","CardBody","Notice","TextControl","BaseControl","RangeControl","DropdownMenu","SelectControl","ColorPalette","ColorIndicator","__experimentalHStack","HStack","__experimentalNumberControl","NumberControl","__experimentalBorderBoxControl","BorderBoxControl","blockEditor","useSetting","getEditorUrl","object","url","URL","adminUrl","key","searchParams","toString","optionsPanel","panels","render","props","Options","settings","saveSettings","isRequesting","instructions","apiOptions","loading","setLoading","isOpen","setIsOpen","setStyle","extra","container","newStyle","handleNotice","colors","notice","status","onRemove","dangerouslySetInnerHTML","__html","path","categoryType","categoryId","block","expire","necessary","necessaryPrefix","offcanvas","options","__nextHasNoMarginBottom","backdrop","scroll","close","keyboard","justifyContent","colorValue","toggleProps","minWidth","popoverProps","focusOnMount","noArrow","enableAlpha","modal","closeOffcanvas","toggler","isShiftStepEnabled","spinControls","min","parseInt","size","allowReset","toast","enable","delay","confirm","reject","isLarge"],"sourceRoot":""}
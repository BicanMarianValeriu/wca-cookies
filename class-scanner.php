<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Modules\Cookies
 * @copyright   Copyright (c) 2024, WeCodeArt Framework
 * @since 		6.4.5
 * @version		6.4.5
 */

namespace WeCodeArt\Support\Modules\Cookies;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\{ Admin, Singleton };
use WeCodeArt\Support\Modules\Cookies;
use function WeCodeArt\Functions\get_prop;

/**
 * The Helpers object.
 */
class Scanner {

	use Singleton;

	const TEST = 'https://httpbin.org/cookies/set?wecodeart=test';

	/**
	 * Send to Constructor
	 */
	public function init() {
		\add_action( 'rest_api_init', [ $this, 'register_route' ], 20, 1 );
	}

	/**
     * Register route.
     *
     * @return 	void
     */
	public function register_route(): void {
		register_rest_route( Admin::NAMESPACE, '/scan_cookies', [
			'methods' 				=> \WP_REST_Server::CREATABLE,
			'callback'				=> [ $this, 'scan_cookies' ],
			'permission_callback' 	=> '__return_true',
		] );
	}

	/**
     * Register route.
     *
     * @return 	WP_REST_Response
     */
	public function scan_cookies( \WP_REST_Request $request ): \WP_REST_Response {
		$scan	= $request->get_param( 'scan' ) ?? 'last';
		$page   = intval( $request->get_param('page') ?? 1 );
		$limit  = 5; // Number of URLs to process per request
		$offset = ( $page - 1 ) * $limit;
		
		if( false === ( $urls = get_transient( Cookies::CACHE . '/urls' ) ) ) {
			// URLs to check cookies
			$urls 	= array_merge( [
				// self::TEST // for testing purposes.
			], explode( PHP_EOL, $request->get_param( 'urls' ) ?? '' ) );

			// Get all registered post types
			$types 	= get_post_types( [ 'public' => true ], 'names' );
			unset( $types['attachment'] );

			// Get all posts for each post type
			foreach ( $types as $type ) {
				$args = [
					'post_type' 		=> $type,
					'posts_per_page' 	=> $scan === 'all' ? -1 : 1,
					'post_status'		=> 'publish'
				];
	
				$posts = get_posts( $args );
				foreach ( $posts as $post ) {
					$urls[] = set_url_scheme( get_permalink( $post ) );
				}
			}

			// Cache for a minute
			set_transient( Cookies::CACHE . '/urls', $urls, MINUTE_IN_SECONDS );
		}
	
		$urls_to_process = array_slice( $urls, $offset, $limit );
		$cookies = [];
	
		foreach ( $urls_to_process as $url ) {
			if( empty( $url ) || ! filter_var( $url, FILTER_VALIDATE_URL ) ) {
				continue;
			}

			$response = $url === self::TEST ? wp_remote_get( $url ) : wp_safe_remote_get( $url );
	
			if ( is_wp_error( $response ) ) {
				$cookies[$url] = null;
				continue;
			}
	
			$detected = wp_remote_retrieve_cookies( $response );
			$cookies[$url] = $detected;
		}

		// Calculate progress
		$total_urls = count( $urls );
		$processed 	= min( $page * $limit, $total_urls );
		$progress 	= ( $processed / $total_urls ) * 100;
		$next		= $processed < $total_urls ? $page + 1 : null;

		// Update cookies data
		$cookies_	= get_transient( Cookies::CACHE ) ?: [];
		$cookies	= array_merge( $cookies_, $cookies );

		// Cache the data
		set_transient( Cookies::CACHE, $cookies, 0 );
		
		return rest_ensure_response( [
			'cookies'   => $cookies,
			'progress'  => $progress,
        	'next' 		=> $next,
		] );
	}
}